// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  hash     String
  hashedRt String?

  firstName String?
  lastName  String?

  profilePicture   String?
  profilePictureId String?

  lists   List[]
  Post    Post[]
  Comment Comment[]
  Like    Like[]

  @@map("users")
}

model List {
  id        Int         @id @default(autoincrement())
  listType  ListType
  authorId  Int
  author    User        @relation(fields: [authorId], references: [id])
  entries   ListEntry[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ListEntry {
  id        Int       @id @default(autoincrement())
  title     String
  mediaType MediaType
  mediaId   Int
  posterUrl String
  listId    Int
  list      List      @relation(fields: [listId], references: [id])
}

enum MediaType {
  Movie
  Show
}

enum ListType {
  Watched
  ToWatch
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String
  mediaId   Int
  mediaType MediaType
  posterUrl String
  rating    Int
  content   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]
  likes    Like[]

  @@unique([userId, mediaId, mediaType])
  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}
